// import baseApi from "../api/baseApi";

// export const PolicyApi = baseApi.injectEndpoints({
//   endpoints: (builder) => ({
//     // Fetch About Us Content
//     aboutUs: builder.query({
//       query: () => ({
//         url: "/about",
//         method: "GET",
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
//         },
//       }),
//     }),

//     // Update About Us Content
//     updateAbout: builder.mutation({
//       query: (updatedData) => ({
//         url: "/about/update-about",
//         method: "POST",
//         body: updatedData,
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
//           "Content-Type": "application/json",
//         },
//       }),
//     }),

//     // Fetch Privacy Policy Content
//     privacy: builder.query({
//       query: () => ({
//         url: "/privacy",
//         method: "GET",
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
//         },
//       }),
//     }),

//     // Update Privacy Policy Content
//     updatePrivacy: builder.mutation({
//       query: (updatedData) => ({
//         url: "/privacy/update-privacy",
//         method: "POST",
//         body: updatedData,
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
//           "Content-Type": "application/json",
//         },
//       }),
//     }),
//   }),
// });

// // Exporting hooks generated by RTK Query
// export const {
//   useAboutUsQuery,
//   useUpdateAboutMutation,
//   usePrivacyQuery,
//   useUpdatePrivacyMutation,
// } = PolicyApi;

import baseApi from "../api/baseApi";

export const PolicyApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    // Fetch About Us Content
    aboutUs: builder.query({
      query: () => ({
        url: "/about",
        method: "GET",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
      }),
      providesTags: ["AboutUs"], // Assign a tag to this query
    }),

    // Update About Us Content
    updateAbout: builder.mutation({
      query: (updatedData) => ({
        url: "/about/update-about",
        method: "POST",
        body: updatedData,
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
          "Content-Type": "application/json",
        },
      }),
      invalidatesTags: ["AboutUs"], // Invalidate the AboutUs tag after mutation
    }),

    // Fetch Privacy Policy Content
    privacy: builder.query({
      query: () => ({
        url: "/privacy",
        method: "GET",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
      }),
      providesTags: ["Privacy"], // Assign a tag to this query
    }),

    // Update Privacy Policy Content
    updatePrivacy: builder.mutation({
      query: (updatedData) => ({
        url: "/privacy/update-privacy",
        method: "POST",
        body: updatedData,
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
          "Content-Type": "application/json",
        },
      }),
      invalidatesTags: ["Privacy"], // Invalidate the Privacy tag after mutation
    }),


    terms: builder.query({
      query: () => ({
        url: "/terms",
        method: "GET",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
        },
      }),
      providesTags: ["terms"], // Assign a tag to this query
    }),


    updateTerms: builder.mutation({
      query: (updatedData) => ({
        url: "/terms/update-terms-condition",
        method: "POST",
        body: updatedData,
        headers: {
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
          "Content-Type": "application/json",
        },
      }),
      invalidatesTags: ["terms"], // Invalidate the Privacy tag after mutation
    }),

  }),
});

// Exporting hooks generated by RTK Query
export const {
  useAboutUsQuery,
  useUpdateAboutMutation,
  usePrivacyQuery,
  useUpdatePrivacyMutation,
  useTermsQuery,
  useUpdateTermsMutation
} = PolicyApi;
